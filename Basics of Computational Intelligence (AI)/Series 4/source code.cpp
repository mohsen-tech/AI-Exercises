// Mohsen AliMohammadi 96440296
#include <iostream>
#include <vector>
#define arr2d vector<vector<float>>
#define theta 0.2
#define alpha 0.8
#define learnSize 14
using namespace std;
int findOne(const vector <float> & a)
{
	for (int i = 0; i < a.size(); i++)
		if (a[i] == 1)
			return i;
	return -1;
}
int main()
{
	arr2d sample{
		{ -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , -1 , +1 , +1 , +1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 } ,
		{ -1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , +1 , +1 , +1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 } ,
		{ -1 , -1 , -1 , +1 , +1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , -1 , -1 , +1 , +1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , -1 , -1 , +1 , +1 } ,
		{ -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 } ,
		{ -1 , -1 , +1 , +1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 } ,
		{ -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 } ,
		{ -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 , -1 , +1 , +1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 } ,
		{ -1 , -1 , +1 , +1 , +1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , +1 , +1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 , +1 } ,
		{ -1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , +1 , +1 , -1 , -1 } ,
		{ +1 , +1 , +1 , -1 , -1 , +1 , +1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , +1 , -1 , -1 , -1 , -1 , -1 , +1 , -1 , +1 , -1 , -1 , -1 , -1 , +1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , -1 , -1 , +1 , -1 , +1 , +1 , +1 , -1 , -1 , +1 , +1 }
	}; // 21 * 63
	arr2d target{
		{ +1 , -1 , -1 , -1 , -1 , -1 , -1 } ,
		{ -1 , +1 , -1 , -1 , -1 , -1 , -1 } ,
		{ -1 , -1 , +1 , -1 , -1 , -1 , -1 } ,
		{ -1 , -1 , -1 , +1 , -1 , -1 , -1 } ,
		{ -1 , -1 , -1 , -1 , +1 , -1 , -1 } ,
		{ -1 , -1 , -1 , -1 , -1 , +1 , -1 } ,
		{ -1 , -1 , -1 , -1 , -1 , -1 , +1 }
	}; // 7 * 7
	arr2d weight(sample[0].size(), vector <float>(target[0].size(), 0)); // 63 * 7
	vector <float> y(weight[0].size(), 0), y_in(weight[0].size(), 0), bias(weight[0].size(), 0);
	bool condition = true;
	int cnt = 0;
	// step 1.
	while (condition)
	{
		condition = false;
		// step 2.
		for (int index = 0; index < learnSize; index++)
		{
			// step 3.
			vector <float> x = sample[index];
			vector <float> t = target[index % 7];
			// step 4, 5.
			for (int j = 0; j < weight[0].size(); j++)
			{
				for (int i = 0; i < weight[0].size(); i++)
				{
					float sum = 0;
					for (int l = 0; l < x.size(); l++)
						sum += x[l] * weight[l][i];
					y_in[i] = bias[i] + sum;
				}
				for (int i = 0; i < sample[0].size(); i++)
				{
					if (y_in[j] > theta)
						y[j] = 1;
					else if (y_in[j] < -1 * theta)
						y[j] = -1;
					else
						y[j] = 0;
					if (t[j] != y[j])
					{
						condition = true;
						bias[j] += alpha * t[j];
						weight[i][j] += alpha * t[j] * x[i];
					}
				}
			}
		}
		cnt++;
	}
	cout << "after " << cnt << " step\n\nresult of weight: \n";
	for (int i = 0; i < weight.size(); i++)
	{
		for (int j = 0; j < weight[i].size(); j++)
		{
			cout << weight[i][j];
			if (j < weight[i].size() - 1)
				cout << " | ";
		}
		cout << "\n";
	}
	cout << "\nresult of bias:\n{ ";
	for (int i = 0; i < bias.size(); i++)
	{
		cout << bias[i];
		if (i < bias.size() - 1)
			cout << ", ";
	}
	cout << " }\n\n";
	int sampleNum;
	cout << "samples: A - B - C - D - E - J - K\n";
	cout << "font1 (samples) :  1 - 7\n";
	cout << "font2 (samples) :  8 - 14\n";
	cout << "font3 (samples) : 15 - 21\n\n";
	cout << "pls enter number of sample: ";
	cin >> sampleNum;
	y_in.clear();
	vector <float> x = sample[sampleNum - 1], z;
	for (int i = 0; i < weight[0].size(); i++)
	{
		float sum = 0;
		for (int l = 0; l < x.size(); l++)
			sum += x[l] * weight[l][i];
		y_in.push_back(bias[i] + sum);
	}
	for (int i = 0; i < y_in.size(); i++)
		if (y_in[i] > theta)
			z.push_back(1);
		else if (y_in[i] < -theta)
			z.push_back(-1);
	char ch[7] = { 'A' , 'B' , 'C' , 'D'  , 'E' , 'J' , 'K' };
	int index = findOne(z);
	if (index != -1)
		cout << "\nsample(" << sampleNum << ") is " << ch[index] << "\n";
	else
		cout << "\ncan't find sample(" << sampleNum << ")!\n";
	system("pause>0");
	return 0;
}